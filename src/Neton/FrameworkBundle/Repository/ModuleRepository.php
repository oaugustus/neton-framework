<?php

namespace Neton\FrameworkBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ModuleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ModuleRepository extends EntityRepository
{
    /**
     * @var string
     * 
     * Nome da classe da entidade Module.
     */
    private $entity = '\\Neton\\FrameworkBundle\\Entity\\Module';
    
    /**
     * Retorna a lista dos bundles cadastrados no sistema.
     * 
     * @param array $params
     */
    public function getList($params)
    {
        $qb = $this->_em->createQueryBuilder()
                ->select('m, b.id as bundle, b.title as bundle_name')
                ->from($this->entity, 'm')
                ->join('m.bundle','b')
                ->orderBy('b.orderIndex','ASC');
        
        $rs = $qb->getQuery()->getResult('FlatScalar');
        
        return $rs;
    }
    
    /**
     * Encontra e retorna os módulos para a exibição na inteface de usuário.
     * 
     * @param Integer $userId
     */
    public function findToUi($userId)
    {
        $qb = $this->_em->createQueryBuilder()
                ->select('m')
                ->from($this->entity, 'm')
                ->where('m.enabled = :enabled')
                ->setParameter('enabled','1');
        
        $bundles = array();
        
        $rs = $qb->getQuery()->getResult();
        
        foreach ($rs as $module){
            $bundle = $module->getBundle();
            
            // se o bundle estiver habilitado
            if ($bundle->getEnabled() == '1'){
                $bundleKey = 'b'.$bundle->getOrderIndex().'_'.$bundle->getName();

                if (!isset($bundles[$bundleKey])){

                    $bundles[$bundleKey] = array(
                        'name' => $bundle->getName(),
                        'title' => $bundle->getTitle(),
                        'iconCls' => $bundle->getIconCls(),
                        'isDefault' => (boolean) $bundle->getIsDefault(),
                        'modules' => array()
                    );
                }

                $moduleKey = 'm'.$module->getOrderIndex().'_'.$module->getName();

                $bundles[$bundleKey]['modules'][$moduleKey] = array(
                    'name' => $module->getName(),
                    'title' => $module->getTitle(),
                    'isDefault' => (boolean) $module->getIsDefault(),
                    'separator' => (boolean)$module->getSeparator(),
                    'iconCls' => $module->getIconCls()
                );
                
            }
        }
        
        // ordena os bundles de acordo com sua ordem
        ksort($bundles);
        
        // ordena os módulos de acordo com a ordem pré-definida
        foreach ($bundles as $name => $bundle){
            ksort($bundles[$name]['modules']);
        }
        
        
        return $bundles;

    }
}
